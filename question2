/* 2)
Algorithm without recursion:

Create an empty list to store the unique values.
Loop through each element in the input array:
a. If the element is not already in the unique list, append it to the list.
Return the unique list. */

function removeDuplicates(arr) {
  var uniqueArr = [];
  for (var i = 0; i < arr.length; i++) {
    if (uniqueArr.indexOf(arr[i]) === -1) {
      uniqueArr.push(arr[i]);
    }
  }
  return uniqueArr;
}

console.log(removeDuplicates([7, 9, "hi", 12, "hi", 7, 53])); // Output: [7, 9, "hi", 12, 53]

/* Algorithm with recursion:

If the input array is empty, return an empty array.
Create a new array containing only the first element of the input array.
For each subsequent element in the input array:
a. If the element is not already in the new array, append it to the array.
Return the new array. */

function removeDuplicates(arr) {
  if (arr.length === 0) {
    return [];
  } else {
    var restArr = removeDuplicates(arr.slice(1));
    if (restArr.indexOf(arr[0]) === -1) {
      return [arr[0]].concat(restArr);
    } else {
      return restArr;
    }
  }
}

console.log(removeDuplicates([7, 9, "hi", 12, "hi", 7, 53])); // Output: [7, 9, "hi", 12, 53]

//


/* You are correct that passing 0 as the argument to the slice() method would slice off the first element of the array. However, in this particular implementation, the code is recursively calling the removeDuplicates() function with the arr.slice(1) expression, which creates a new array starting from the second element of the original array.

This recursive call will continue until the arr parameter has a length of 0, at which point an empty array is returned. Then, each recursive call checks whether the first element of the original array (arr[0]) is already present in the array returned by the recursive call (restArr). If it is not, the function concatenates the first element with the array returned by the recursive call using the concat() method, and returns the resulting array. If it is already present, the function simply returns the array returned by the recursive call.

In short, the arr.slice(1) expression is used to recursively remove duplicates from the array, and the indexOf() method is used to check whether an element is already present in the array returned by the recursive call. */